import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
from tensorflow.keras.regularizers import l2
def build_model(input_shape, num_classes):
    model = keras.Sequential([
        keras.layers.Flatten(input_shape=input_shape),
        keras.layers.Dense(512, activation='relu', kernel_regularizer=l2(0.01)),
        keras.layers.BatchNormalization(),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(256, activation='relu', kernel_regularizer=l2(0.01)),
        keras.layers.BatchNormalization(),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(num_classes, activation='softmax') ])
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model
def train_and_evaluate(dataset, dataset_name, epochs):
    (x_train, y_train), (x_test, y_test) = dataset.load_data()
    x_train, x_test = x_train / 255.0, x_test / 255.0
    input_shape = x_train.shape[1:]
    num_classes = len(np.unique(y_train))
    model = build_model(input_shape, num_classes)
    datagen = keras.preprocessing.image.ImageDataGenerator(
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        horizontal_flip=True)
    datagen.fit(x_train)
    early_stopping = keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
    model.fit(datagen.flow(x_train, y_train, batch_size=32),
              epochs=epochs, validation_data=(x_test, y_test), verbose=1, callbacks=[early_stopping])
    test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
    print(f"\n{dataset_name} - Test Accuracy: {test_acc}")
    predictions = model.predict(x_test)
    predicted_labels = np.argmax(predictions, axis=1)
    print(f"\nClassification Report for {dataset_name}:\n", classification_report(y_test, predicted_labels))
train_and_evaluate(keras.datasets.cifar100, "CIFAR-100", epochs=20)
