import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
mnist = keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
model = keras.Sequential([keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense(512, activation='relu'), keras.layers.Dense(256, activation='relu'), keras.layers.Dense(128, activation='relu'), keras.layers.Dense(10, activation='softmax')])
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test), batch_size=32)
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print("\nTest accuracy:", test_acc)
predictions = model.predict(x_test)
predicted_labels = np.argmax(predictions, axis=1)
print("\nClassification Report:\n", classification_report(y_test, predicted_labels))
def display_predictions(indices):
    fig, axes = plt.subplots(1, len(indices), figsize=(10, 3))
    for ax, index in zip(axes, indices):
        ax.imshow(x_test[index], cmap=plt.cm.binary)
        ax.set_title(f"Pred: {predicted_labels[index]}\nActual: {y_test[index]}")
        ax.axis('off')
    plt.show()
display_predictions([0, 1, 2])
