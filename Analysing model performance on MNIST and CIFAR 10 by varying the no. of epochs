
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
def build_model(input_shape, num_classes):
    model = keras.Sequential([
        keras.layers.Flatten(input_shape=input_shape),
        keras.layers.Dense(512, activation='relu'),
        keras.layers.Dense(256, activation='relu'),
        keras.layers.Dense(num_classes, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model
def train_and_evaluate(dataset, dataset_name, epochs_list):
    (x_train, y_train), (x_test, y_test) = dataset.load_data()
    x_train, x_test = x_train / 255.0, x_test / 255.0
    input_shape = x_train.shape[1:]
    num_classes = len(np.unique(y_train))
    for epochs in epochs_list:
        print(f"Training {dataset_name} with {epochs} epochs...")
        model = build_model(input_shape, num_classes)
        model.fit(x_train, y_train, epochs=epochs, validation_data=(x_test, y_test), batch_size=32, verbose=1)
        test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
        print(f"\n{dataset_name} - Epochs: {epochs}, Test Accuracy: {test_acc}")
        predictions = model.predict(x_test)
        predicted_labels = np.argmax(predictions, axis=1)
        print(f"\nClassification Report for {dataset_name} ({epochs} epochs):\n", classification_report(y_test, predicted_labels))
epochs_list = [5, 10, 20]
train_and_evaluate(keras.datasets.mnist, "MNIST", epochs_list)
train_and_evaluate(keras.datasets.cifar10, "CIFAR-10", epochs_list)
